buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.1.1'
        classpath 'com.bmuschko:gradle-docker-plugin:2.5'
    }
}


apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.bmuschko.docker-remote-api'


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
version = '3.1.0'
if (!JavaVersion.current().java8Compatible) {
    throw new IllegalStateException('''A Haiku:
                                      |  This needs Java 8,
                                      |  You are using something else,
                                      |  Refresh. Try again.'''.stripMargin())
}
docker{
    url = "$dockerHost"
//    if ( "$certUrl" != "" )
//        certPath = new File("$certUrl")
        //certPath = new File('/Users/itai/.docker/machine/machines/gradleBuild')
   // certPath = new File(certUrl)

}
repositories {
    mavenCentral()
    maven {
        url = 'http://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    compile "io.vertx:vertx-core:$version"
    compile "io.vertx:vertx-web:$version"
    compile "io.vertx:vertx-hazelcast:$version"
    compile 'com.cyngn.vertx:vertx-kafka:0.4.1'
    compile "io.vertx:vertx-mongo-client:$version"
    compile "org.slf4j:slf4j-log4j12:1.7.12"
	compile "org.slf4j:slf4j-api:1.7.12"
	compile "log4j:log4j:1.2.17"
}

shadowJar {
    classifier = 'fat'
    manifest {
        attributes 'Main-Class': 'io.vertx.core.Launcher'
        attributes 'Main-Verticle': 'com.tikal.fleettracker.gpsservice.GpsServiceVerticle'
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

task zipAll(type: Tar) {
    dependsOn shadowJar
    extension = 'tar'
	baseName = 'ft-gps-service'
    from ('.'){
        include 'conf/**'
        include 'build/libs/*.jar'
     }
     from ('.'){
        include '*.sh'
        fileMode 0755
     }
}

task buildImage(type: DockerBuildImage) {
    dependsOn zipAll
    quiet = false
    inputDir = projectDir

    tag = "$registerBaseName$dockerBranch/$project.name:$dockerTag"
}
task pushImage(type: DockerPushImage) {
    dependsOn buildImage
    imageName = "$registerBaseName$dockerBranch/$project.name"
    tag="$dockerTag"
}

task createContainer(type: DockerCreateContainer) {
    dependsOn buildImage
    containerName = project.name
    //cpuset = createContainerCpuset
    //cmd = createContainerCmd
    targetImageId { buildImage.getImageId() }
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId()}
}
task createContainerMongo(type: DockerCreateContainer) {
    dependsOn startContainer
    cmd = ""
    containerName = "TestMongo"
    portBindings = "27017:27017"
    targetImageId { 'mongo' }
}
task startContainerMongo(type: DockerStartContainer) {
    dependsOn createContainerMongo
    targetContainerId { createContainerMongo.getContainerId()}
}

task createContainerKafka(type: DockerCreateContainer) {
    dependsOn startContainerMongo
    containerName = "kafka"
    //cmd = ""
    env = ["ADVERTISED_HOST=ft-kafka", "ADVERTISED_PORT=9092"]
    exposedPorts= ['tcp' : 9092 ]
    portBindings="2181:2181"


    targetImageId { "spotify/kafka" }
}
task startContainerKafka(type: DockerStartContainer) {
    dependsOn createContainerKafka
    targetContainerId { createContainerKafka.getContainerId()}
}



task functionalTest(type: Test) {
    dependsOn startContainerKafka
    description = 'Runs the integration tests.'
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    systemProperty "docker.host", dockerHost
   // systemProperty "docker.port", dockerPort
   // systemProperty "test.port", testPort
    // finalizedBy removeContainer
}
task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}
